name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-22.04  # Cambiado a LTS estable
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -h localhost -U myuser -d mydatabase"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongo:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install MongoDB Shell (mongosh)
        run: |
          # Solución universal para cualquier versión de Ubuntu
          curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb.gpg
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Wait for PostgreSQL
        run: |
          timeout 120 bash -c 'until pg_isready -h localhost -U myuser -d mydatabase; do sleep 2; echo "Waiting for PostgreSQL..."; done'

      - name: Wait for MongoDB
        run: |
          timeout 180 bash -c 'until mongosh --host localhost --username root --password example --eval "db.adminCommand(\"ping\")" --quiet; do sleep 5; echo "Waiting for MongoDB..."; done'

      - name: Test Producto Service (Spring Boot)
        working-directory: ./producto
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/mydatabase
          SPRING_DATASOURCE_USERNAME: myuser
          SPRING_DATASOURCE_PASSWORD: secret
          SPRING_PROFILES_ACTIVE: test
        run: |
          ./mvnw clean test

      - name: Test Inventario Service (Python)
        working-directory: ./inventario-service
        env:
          MONGO_URI: mongodb://localhost:27017
          DB_NAME: inventario_db
          API_KEY: XYZ123
          PRODUCTOS_SERVICE_URL: http://localhost:8080
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          PYTHONPATH=. pytest -v

  deploy:
    needs: build-and-test
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker-compose up -d --build
          docker-compose ps
