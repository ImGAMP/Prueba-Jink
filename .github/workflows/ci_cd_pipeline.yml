name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -h localhost -U myuser -d mydatabase"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongo:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --host localhost --username root --password example --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL
        run: |
          timeout 120 bash -c 'until pg_isready -h localhost -U myuser -d mydatabase; do sleep 2; echo "Waiting for PostgreSQL..."; done'

      - name: Wait for MongoDB
        run: |
          timeout 120 bash -c 'until mongo --host localhost --username root --password example --eval "db.adminCommand(\"ping\")"; do sleep 2; echo "Waiting for MongoDB..."; done'

      - name: Test Producto Service (Spring Boot)
        working-directory: ./producto
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/mydatabase
          SPRING_DATASOURCE_USERNAME: myuser
          SPRING_DATASOURCE_PASSWORD: secret
          SPRING_PROFILES_ACTIVE: test
        run: |
          ./mvnw clean test

      - name: Test Inventario Service (Python)
        working-directory: ./inventario-service
        env:
          MONGO_URI: mongodb://localhost:27017
          DB_NAME: inventario_db
          API_KEY: XYZ123
          PRODUCTOS_SERVICE_URL: http://localhost:8080
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          PYTHONPATH=. pytest -v

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker-compose up -d --build
          docker-compose ps
